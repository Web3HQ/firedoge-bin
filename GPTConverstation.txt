About firefox-branding.js' pref("startup.homepage_welcome_url", "");

How to add the homepage folder with its index.html built-in into my Firefox browser build?






To add a built-in homepage with its index.html to your Firefox browser build, follow these steps:

1. Create a directory within the Firefox source tree to hold your homepage files. For example, you might create a directory at browser/components/homepage.

2. Place your index.html file and any associated assets (CSS, JavaScript, images, etc.) in this new directory.

3. Modify the pref file to set the default homepage URL to point to the built-in page using a resource URI. For example, in firefox-branding.js or a similar preferences file, add:

pref("startup.homepage_welcome_url", "resource:///components/homepage/index.html");

4. Update the chrome.manifest file in the Firefox source to include a resource directive that maps the resource:///components/homepage/ URI to the physical location of your homepage files within the source tree. Add the following line to chrome.manifest:

resource homepage /browser/components/homepage/

5. Rebuild Firefox to include the new homepage in the build.

6. Test the build to ensure that the new homepage is displayed when opening a new window or tab, as specified by the startup.homepage_welcome_url preference.

By following these steps, your custom homepage will be built into Firefox and set as the default homepage.






How to set what will be the default branding, nightly or a custom one?

How to make a Windows (with installer) and a .deb build?

To set the default branding to either "nightly" or a custom one, you need to modify the mozconfig file used during the build process. Here's how to specify the branding:

1. Open the mozconfig file for your build.
2. Add the following line to use the nightly branding:

   ac_add_options --with-branding=browser/branding/nightly
   
Or, to use a custom branding, replace nightly with the path to your custom branding directory:

   ac_add_options --with-branding=browser/branding/your_branding_directory
   
To make a Windows build with an installer:

1. Ensure you're on a Windows machine, as the installer build depends on Windows-specific tools.
2. Run mach package after a successful build to create the installer. The installer will be located in $OBJDIR/dist/install/sea/.
3. If you need to build the stub installer, add export MOZ_STUB_INSTALLER=1 to your mozconfig.
4. For official branding, add ac_add_options --with-branding=browser/branding/official to your mozconfig.

To make a .deb build for Debian-based systems:

1. Ensure you have the necessary Debian packaging tools installed.
2. Navigate to the objdir and run make package.
3. This will create a .deb package in the objdir/dist/ directory.

Remember to include the Visual C++ Redistributable 1 in your mozconfig for Windows builds, and to follow the Debian packaging guidelines for .deb packages.
